{"version":3,"sources":["App.js","index.js","credentials.js"],"names":["App","db","firebase","firestore","notificationData","localStorage","getItem","_useState","useState","loading","events","notification","JSON","parse","_useState2","Object","slicedToArray","state","setState","useEffect","signInAnonymous","auth","signInAnonymously","then","getData","catch","error","console","log","collection","doc","get","objectSpread2","data","count","toggleNotification","notificationPayload","notificationTest","setItem","stringify","react_default","a","createElement","className","concat","topCount","href","target","onClick","process","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","src_App","document","getElementById"],"mappings":"qOAgGeA,eA1FH,WACV,IAAMC,EAAKC,IAASC,YACdC,EAAmBC,aAAaC,QAAQ,oBAF9BC,EAIUC,mBAAS,CACjCC,SAAS,EACTC,OAAQ,KACRC,eAAcC,KAAKC,MAAMT,IAAoBQ,KAAKC,MAAMT,GAAkBO,eAP5DG,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAITU,EAJSH,EAAA,GAIFI,EAJEJ,EAAA,GAUhBK,oBAAU,WAERC,KACC,IAEH,IAAMA,EAAkB,WAEtBlB,IAASmB,OAAOC,oBACbC,KAAK,WAEJC,MAEDC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,sBAAuBF,MAGjDF,EAAU,WACdvB,EAAG4B,WAAW,UACbC,IAAI,UACJC,MACAR,KAAK,SAAAO,GAGJZ,EAASH,OAAAiB,EAAA,EAAAjB,CAAA,GACJE,EADG,CAENR,SAAS,EACTC,OAAQoB,EAAIG,YAIfR,MAAM,WAELP,EAASH,OAAAiB,EAAA,EAAAjB,CAAA,GACJE,EADG,CAENR,SAAS,EACTC,OAAQ,CAACwB,MAAO,yCAKhBC,EAAqB,WACzB,IAAMC,EAAsB/B,aAAaC,QAAQ,oBAEjD,GAA4B,OAAxB8B,EAA8B,CAChC,IAAMC,EAAmBzB,KAAKC,MAAMuB,GAAqBzB,aAEzDN,aAAaiC,QAAQ,mBAAoB1B,KAAK2B,UAAU,CAAC5B,cAAc0B,KACvEnB,EAASH,OAAAiB,EAAA,EAAAjB,CAAA,GAAIE,EAAL,CAAYN,cAAc0B,OAYtC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEZ1B,EAAMR,QACH+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iBAVNH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,GAAAC,OAAmC3B,EAAMP,OAAOwB,MAAhD,aACAM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,YAAAC,OAAyC3B,EAAMP,OAAOmC,SAAtD,cAYAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,sBACqBH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,8CAA8CC,OAAO,OAA7D,kBADrB,IAC2GP,EAAAC,EAAAC,cAAA,mBAG3GF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZ1B,EAAMN,aACH6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKK,QAAU,WAAOb,MAArC,gDACAK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMK,QAAU,WAAOb,MAAtC,kDC/EZR,QAAQC,IAAI,WAAYqB,cAExB/C,IAASgD,cCZW,CAClBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8CDOTC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.bad0ff55.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n/** firebase */\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst App = () => {\n  const db = firebase.firestore()\n  const notificationData = localStorage.getItem('symplometro-data')\n  \n  const [state, setState] = useState({\n    loading: true,\n    events: null,\n    notification: JSON.parse(notificationData) ? JSON.parse(notificationData).notification : false\n  })\n\n  useEffect(() => {\n    /** logIn */\n    signInAnonymous()\n  }, [])\n\n  const signInAnonymous = () => {\n\n    firebase.auth().signInAnonymously()\n      .then(() => {\n        // console.log('< LOG IN : DONE > ', response)\n        getData()\n      })\n      .catch(error => console.log('< LOG IN : ERROR > ', error))\n  }\n\n  const getData = () => {\n    db.collection('events')\n    .doc('config')\n    .get()\n    .then(doc => {\n      // console.log('< FIRESTORE : GET DATA > ', doc.data(), process.env)\n\n      setState({\n        ...state,\n        loading: false,\n        events: doc.data()\n      })\n\n    })\n    .catch(() => {\n      // console.warn('< DATABASE : GET : ERROR > ', error )\n      setState({\n        ...state,\n        loading: false,\n        events: {count: 'Aguardando atualização...'}\n      })\n    })\n  }\n\n  const toggleNotification = () => {\n    const notificationPayload = localStorage.getItem('symplometro-data')\n\n    if (notificationPayload !== null) {\n      const notificationTest = JSON.parse(notificationPayload).notification\n\n      localStorage.setItem('symplometro-data', JSON.stringify({notification: notificationTest ? false : true}))\n      setState({...state, notification: notificationTest ? false : true})\n    }\n\n  }\n\n  const eventsTemplate = () => (\n    <div className=\"box-events\">\n      <div className=\"actual-events\">{`${state.events.count} eventos`}</div>\n      <div className=\"top-events\">{`Recorde: ${state.events.topCount} eventos`}</div>\n    </div>\n  )\n\n  return (\n    <div className=\"symplometro-app\">\n\n      {state.loading\n        ? <div className=\"loading\">Carregando...</div>\n        : eventsTemplate()\n      }\n\n      <div className=\"footer\">\n        Feito com amor por <a href=\"https://www.linkedin.com/in/glauro-juliani/\" target=\"new\">Glauro Juliani</a> <b>0.2.3</b>\n      </div>\n      \n      <div className=\"notification\">\n        {state.notification\n          ? <div className=\"on\" onClick={ () => {toggleNotification()} }>Notificações ON (click para desativar)</div>\n          : <div className=\"off\" onClick={ () => {toggleNotification()} }>Notificações OFF (click para ativar)</div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n/** style */\nimport './main.scss'\n/** core */\nimport App from './App'\n/** firebase */\nimport firebase from 'firebase/app'\nimport {credentials} from './credentials'\n\nconsole.log('< ENV > ', process.env.NODE_ENV)\n\nfirebase.initializeApp(credentials)\n\nReactDOM.render(<App />, document.getElementById('root'))","const credentials = {\n  apiKey: \"AIzaSyAOq1-ibTMS4HChhuxpCeCwUFFQai16I1c\",\n  authDomain: \"symplometro.firebaseapp.com\",\n  databaseURL: \"https://symplometro.firebaseio.com\",\n  projectId: \"symplometro\",\n  storageBucket: \"symplometro.appspot.com\",\n  messagingSenderId: \"106786872116\",\n  appId: \"1:106786872116:web:9c7693352d516bb425e361\"\n}\n\nexport { credentials }"],"sourceRoot":""}